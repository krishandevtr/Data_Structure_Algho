#include<iostream>
using namespace std;


int main(){

    return 0;
}

/**
 * ! We all are doing some kind of works
 * ! we can say that i have spend 1hr for studying or 8hr for job
 * ! This is the analysis that done by ourself
 * ! What about the program how can we say that this program takes this much take 
 * ! We can use a function for the tracking the time lets say if have a function called giveTime() this gonna give the time between 2 points (a,b) where a is the initial time and b is final time
 * ! We can minus both the values right
 * ! Think of that this may vary depends upon the p.c amount of data
 * ! In general how we can say ?
 */
/**
 * ? The time complexity depends upon the procedures that you are giving to the machine
 * ! Lets say if we have a array with some size we can explicitly say that array have this size
 * ! SO we can say that the size is 
 * ? n
 * ! We you need to do a addition then if there is n elements then to add of the stuff would take n time
 * ! Because if we need to take every element one by one
 * ! IF the size is 5 then time is also 5 eh
 * ! In computer science we usually say in terms of order or degree 
 * ! There fore in here it is 
 * ? Order(n);
 * !
 */
/**
 * ! For finding the time complexity you can either look to the procedures
 * ! Other wise you can look to the code or logic then also you can say 
 * ! For instance if you have a for(int i; i<n; i++){----}
 * ! The loop is iterating till n
 * ! So we can say that it is order(n);
 * ! If the loop is checking the whether the i is greater than or less than to next element , and we are doing something you can leave that 
 * ! it will start from index 0 and compare it will reest of other elements
 * ! In that array there is n elements right; for each element it gonna compare with rest of the elements
 * ! Number of the elements = n 
 * ! For n elements it gonna compare with rest of n elements
 * ! Then we can say it is order(n^2);
 * ! OTher wise we can say that the for the first element we can say that this is gonna work till n-1, for second n-2 , third, n-3 and so on
 * ! look the patterns n ,n-1 , n-2 , n-3.....n-n
 * ! Sum of that is n(n-1)/2 -> sum of the n natural numbers 
 * ! that is N2-n/2 
 * ! But we look the degree of the polynomial function so it is n2
 * ! 
 */

/**
 * ! There is another way like finding the middle of the array , again on the left and right side we will find the middle elements
 * ! Successively dividing the stuff until this reach 1
 * ! That is represented by log n
 * ! log2 n ( why 2 because we are dividing the stuff by 2 );
 * ! for(i =n; i>1; i = i/2){---} here we are skipping half of the elements
 * ? Do not say o(n) by seeing the single for loop 
 * ! Check what is happening their
 */

/**
 * ! For a given matrix if the dimension are 4 * 4
 * ! Then we can say that n * n
 * ! n2
 * ! If you are using only a row then we can say that it is n;
 * ! similar to that of the columns
 */
